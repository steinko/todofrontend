{"version":3,"sources":["service/authenticationService/AutenticationService.js","components/todo/login/Login.jsx","components/todo/logout/Logout.jsx","service/Environment.js","service/Logger.js","service/helloworldservice/HelloWorldService.js","service/helloworldbeanservice/HelloWorldBeanService.js","components/todo/welcome/Welcome.jsx","service/todoservice/TodosService.js","components/todo/todolist/TodoList.jsx","components/todo/header/Header.jsx","components/todo/footer/Footer.jsx","components/todo/blank/Blank.jsx","components/todo/todocomponent/TodoComponent.jsx","components/todo/autenticatedroute/AuthenticateRoute.jsx","components/todo/todoapp/TodoApp.jsx","App.jsx","serviceWorker.js","index.js"],"names":["username","password","sessionStorage","setItem","removeItem","getItem","Login","props","state","showSucessMessage","hasLoginFailed","handleChange","bind","loginClick","event","this","setState","target","name","value","AutheniationcService","registerSucessfulLogin","console","log","id","type","onChange","data-testid","onClick","Component","Logout","Environment","serverUrl","process","BACKEND_URL","env","ENV","winston","require","Elasticsearch","Logger","instance","esTransportOpts","level","clientOpts","node","index","logger","createLogger","transports","getLogger","urlstring","Enviroment","fetch","response","text","error","HelloWorldBeanService","json","message","Welcome","pops","helloWorldService","helloWorldBeanService","welcomMessage","className","match","params","to","welcomeMessage","HelloWorldService","getMessage","data","TodosService","userName","method","TodoList","todos","refreshTodos","deleteTodoClicked","updateTodoClicked","getTodos","result","AutenticationService","getUserName","deleteTodo","history","push","class","map","todo","key","description","targetDate","toString","isDone","addTodoClicked","Header","isLogIn","AuthenticationService","isLogin","href","logOut","Footer","Blank","TodoCompnent","deccription","AuthenticatedRoute","TodoApp","path","exact","component","TodoComponent","ErrorMessage","config","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ba2beccd.chunk.js","sourcesContent":["class AutheniationcService {\n\t\n\tregisterSucessfulLogin(username, password) {\n\n\t\tsessionStorage.setItem('authenticatedUser', username)\n\n\t}\n\n\n\tlogOut() { \n\n\t   sessionStorage.removeItem('authenticatedUser')\n\n\t}\n\n\t\n\tisLogin() { \n\n\t\tif (sessionStorage.getItem('authenticatedUser')=== null)\n\t\t  return false\n\t\telse \n\t\t  return true \n\n\t}\n\n\tgetUserName () { \n\t\treturn  sessionStorage.getItem('authenticatedUser')\n\t}\n\n\n\n}\n\nexport default new AutheniationcService() \n","import React from 'react'\nimport {Component} from 'react'\nimport AutheniationcService from '../../../service/authenticationService/AutenticationService.js'\n\n\nexport default class Login extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = { username: 'in28minutes',\n                       password: '',\n                       showSucessMessage: false,\n                       hasLoginFailed: false\n                     }\n        this.handleChange = this.handleChange.bind(this)\n        this.loginClick = this.loginClick.bind(this) \n     }\n\n /**\n * Set the evenet as a state\n *\n * @param {event}  The event to be stored.\n */\n     handleChange(event) { \n\n        this.setState({[event.target.name]\n          :event.target.value })\n      }\n\n      loginClick()   {\n\n        if (this.state.username ==='in28minutes' && this.state.password === 'dummy') { \n            let aut =AutheniationcService\n            aut.registerSucessfulLogin(this.state.username, this.state.password)\n            console.log('sucessfull login')\n            console.log(this.state)\n           // this.props.history.push(`/welcome/${this.state.username}`)\n\n        }\n        else \n         {\n            console.log('loging failure')\n            this.setState ( { showSucessMessage: false }) \n            this.setState (  { hasLoginFailed: true }) \n                      \n          }\n          \n\n      }\n     \n\n    render() { return (           \n                <div>\n\n\n                  <h1>Login</h1>\n                     {this.state.hasLoginFailed && <h1 id= \"invalid\">Invalid Credentials </h1>}\n                     {this.state.showSucessMessage &&<h1>Sucsessfull Login</h1>}\n                \n                  <label>\n                    User Name:\n                    <input \n                      id = 'username'\n                      type='text' \n                      name='username' \n                      value= {this.state.username} \n                      onChange= {this.handleChange}\n                    />\n                  </label>\n             \n                  <label>\n                    Password: \n                    <input \n                      id=\"password\"\n                      type='password' \n                      name='password' \n                      value= {this.state.password} \n                      onChange= {this.handleChange}\n                    />\n                  </label>\n              \n                  <button \n                    id=\"loginButton\" \n                    data-testid=\"Login\"\n                    onClick= {this.loginClick}>\n                    Login\n                  </button>\n\n\n              </div> \n          )}\n}","import React from 'react'\nimport {Component} from 'react'\nclass  Logout extends Component  {\n\trender () {\n\t\treturn <div>Logout</div>\n\t\n}\n}\nexport default Logout"," class Environment {\n\n  static    serverUrl = ()=> {\n         return process.env.BACKEND_URL   \n    }\n\n   static  env = () => {\n        return process.env.ENV\n   }\n }\n\nexport default Environment ","var winston = require('winston');\nvar Elasticsearch = require('winston-elasticsearch');\n \nclass Logger { \n\n   constructor() {\n\t this.instance=null\n\t this.esTransportOpts = {\n\t   level: 'info' ,\n     clientOpts: { node: 'http://localhost:9200'},        \n      index:'todo-frontend'\n\t }\n\n     this.logger = winston.createLogger({\n           transports: [\n               new Elasticsearch(this.esTransportOpts)\n           ]\n      })\n    }\n\n\tstatic getLogger() { \n      if (this.instance == null)  { \n        this.instance =  new Logger()\n      }\n     return this.logger\n   }\n } \nexport default Logger","import Enviroment from '../Environment'\nimport Logger from '../Logger'\n\nclass HelloWorldService {\n  \n  async getMessage () {\n     let logger = Logger.getLogger()\n     try {\n       //logger.info('HelloWorldService')\n       let urlstring= Enviroment.serverUrl() + '/hello-world'\n       let response = await fetch(urlstring)\n       ///logger.info('Response:',response)\n       let text = await response.text()\n        return  text\n    } catch(error)  { \n        logger.error('error')\n        throw error\n    }\n  }\n}\nexport default new HelloWorldService()\n"," import Enviroment from '../Environment'\n //import Logger from './Logger'\n\n class HelloWorldBeanService {\n    \n\n  \n  async getMessage() {\n    //let logger = Logger.getLogger();\n    try {\n      \n       ///logger.info('HelloWorldBeanService')\n       //logger.info('Server Url: ', Enviroment.serverUrl())\n\n       //logger.info('Env',Enviroment.env())\n\n      let response = await fetch(Enviroment.serverUrl() + '/hello-world-bean')\n      let json = await response.json()\n      let message = json.message\n      //logger.info('Message',message)\n      return  message\n    } catch(error)  { \n       // logger.error('Error Hello world bean',error)\n        throw error\n    }\n\n   }\n}\nexport default HelloWorldBeanService\n","import React from 'react'\nimport {Component} from 'react'\nimport  {Link} from 'react-router-dom'\nimport HelloWorldService from  '../../../service/helloworldservice/HelloWorldService'\nimport HelloWorldBeanService from '../../../service/helloworldbeanservice/HelloWorldBeanService'\n\nexport default class Welcome extends Component {\n    constructor(pops){\n        super(pops)\n        this.helloWorldService= this.helloWorldService.bind(this)\n        this.helloWorldBeanService= this.helloWorldBeanService.bind(this)\n        this.state = { welcomMessage: '' } \n    } \n\n    render() { \n        return ( \n                <>\n                  <h1 id=\"welcome\">Welcome!</h1>\n                  <div className=\"container\">\n                      Welcome {this.props.match.params.name}.\n                      You can manage your todos <Link id='todoLink' to=\"/todos\">here</Link>.\n                  </div>\n                  <div className=\"container\">\n                      Click here to get a customized welcome message.\n                      <button onClick={ this.helloWorldService}\n                          className=\"btn btn-success\">Get Welcome Message</button>\n                  </div>\n\n                  <div className=\"container\">\n                      Click here to get a welcome message.\n                      <button onClick={ this.helloWorldBeanService}\n                          className=\"btn btn-success\">Get Welcome Been Message</button>\n                  </div>\n                  <div className=\"container\">\n                      {this.state.welcomeMessage}\n                   </div>\n\n               </>\n                )\n     }\n\n    async helloWorldService() {  \n        try  {\n             const data  = await HelloWorldService.getMessage()\n              console.log(data)\n               this.setState({welcomMessage: data })  \n         } catch (error) {  \n                 this.setState({welcomMessage: error.getMessage() }) \n             }\n        }\n      \n    async helloWorldBeanService() { \n         try  {  \n                 const data  = await HelloWorldBeanService.getMessage()\n                 console.log(data)\n                this.setState({welcomMessage: data })  \n            } catch (error) {  \n\n             }\n      }   \n}","export default class TodosService {\n\n\t static async getTodos(userName){ \n\t    let response = await fetch('http://todo-backend-service/users/stein/todos')\n        let json = await response.json()\n        return json;\n\t}\n\n\tstatic async deleteTodo(username,id){\n\t\tlet response = await fetch('http://todo-backend-service/users/stein/todo/1',{method:'DELETE'})\n\t\tlet json = await response.json()\n        return json;\n\t}\n\n }\n","import React from 'react'\nimport {Component} from 'react'\nimport TodosService from '../../../service/todoservice/TodosService.js'\nimport AutenticationService from '../../../service/authenticationService/AutenticationService'\n\nexport default class TodoList extends Component { \n\n    constructor() { \n        super()\n        this.state = {\n           todos : [],\n           message : ''\n        }\n        this.refreshTodos = this.refreshTodos.bind(this)\n        this.deleteTodoClicked = this.deleteTodoClicked.bind(this)\n         this.updateTodoClicked = this.updateTodoClicked.bind(this)\n    }\n\n    async componentDidMount(){  \n       this.refreshTodos()\n    }\n\n    async refreshTodos () {\n         let result = await TodosService.getTodos(\"stein\")\n         console.log(result)\n         this.setState({todos:result })\n    }\n\n\n    async deleteTodoClicked(id) {  \n       let  userName = AutenticationService.getUserName()\n        await TodosService.deleteTodo(userName,id)\n        this.setState( {message:\"Sucessull deleted todo item\" } )\n        this.refreshTodos()\n \n    }\n\n    async updateTodoClicked(id) {  \n       this.props.history.push(`/todo/${id}`)\n \n    }\n\n\n    render() { \n        return (\n              <div>\n                <h1>List Todos</h1>\n                {this.state.message && <div class=\"alert alert-success\">{this.state.message}</div>}\n                <div className=\"container\">\n                    <table className=\"table\">\n                        <thead>\n                            <tr>\n                                <th>Description</th>                             \n                                <th>Target Date</th>\n                                <th>IsCompleted?</th>\n                                <th>Update</th>\n                                <th>Delete</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.todos.map(\n                                    todo =>\n                                        <tr key={todo.id}>\n                                            <td className= \"todoDescription\" >{todo.description}</td>\n                                            <td>{todo.targetDate.toString()}</td>\n                                            <td>{todo.isDone.toString()}</td> \n\n                                            <td>\n                                                <button \n                                                   className=\"btn btn-success\" \n                                                   onClick={() => this.updateTodoClicked(todo.id)}>\n                                                   Update\n                                                </button>\n                                            </td> \n\n                                            <td>\n                                                <button \n                                                   className=\"btn btn-success\" \n                                                   onClick={() => this.deleteTodoClicked(todo.id)}>\n                                                   Delete\n                                                </button>\n                                            </td> \n                                        </tr>\n                                )\n                            }\n                        </tbody>\n                    </table>\n                    <div className=\"row\">\n                          <button className=\"btn btn-success\" onClick={this.addTodoClicked}>Add</button>\n                          <button className=\"btn btn-success\" onClick={this.deleteTodoClicked}>Delete</button>\n                    </div>\n                </div>\n            </div>\n        )\n   }\n}","import React from 'react'\nimport {Component} from 'react'\nimport  {Link} from 'react-router-dom'\nimport Logout from '../logout/Logout'\nimport AuthenticationService from '../../../service/authenticationService/AutenticationService'\n\nclass Header extends Component{\n   \n\trender () {\n      let aut = AuthenticationService\n     const isLogIn = aut.isLogin()\n\t\treturn (<header>\n                  <nav className=\"navbar navbar-expand-md navbar-dark bg-dark\">\n                    <div><a href=\"http://www.in28minutes.com\" className=\"navbar-brand\">in28Minutes</a></div>\n                    <ul className=\"navbar-nav\">\n                        { isLogIn && <li><Link className=\"nav-link\" to=\"/welcome/in28minutes\">Home</Link></li>}\n                        { isLogIn && <li><Link className=\"nav-link\" to=\"/todos\">Todos</Link></li>}\n                    </ul>\n                    <ul className=\"navbar-nav navbar-collapse justify-content-end\">\n                        {!isLogIn && <li><Link id= \"loginLink\" className=\"nav-link\" to=\"/login\">Login</Link></li>}\n                        {isLogIn && <li><Link id= \"logoutLink\" className=\"nav-link\" to=\"/logout\"  onClick = {AuthenticationService.logOut}>Logout</Link></li>}\n                    </ul>\n                  </nav>\n           </header>)\n\t}\n}\nexport default Header","import React from 'react'\nimport {Component} from 'react'\n\nclass Footer extends Component{\n\trender () { return (\n\t\t    <footer className=\"footer\">\n                <span className=\"text-muted\">All Rights Reserved 2018 @in28minutes</span>\n            </footer>)\n\t}\n}\nexport default Footer","import React, { Component } from 'react'\n\nexport default class Blank extends Component {\n  render () { return(<div> </div>)}\n}","import React from 'react'\nimport { Component} from 'react'\n\nexport default class TodoCompnent extends Component {  \n   constructor(props) { \n\t   super(props)\n\t   this.state = {  id:1,\n\t\t               deccription: '',\n\t\t\t\t\t   targetDate:'',\n\t\t\t\t\t   isDone:false\n\t\t            }\n   }\n\n\n\trender () { \n\t\t        \n\t\treturn (<div> <h1>Todo </h1>\n\t\t          <label>\n\t\t\t\t\tDescription\n\t\t\t\t\t<input> {this.state.description}  </input>\n\t\t\t\t  </label>\n\n\t\t\t\t  <label>\n\t\t\t\t\tTarget Date\n\t\t\t\t\t<input> {this.state.targetDate}  </input>\n\t\t\t\t  </label>\n\n\t\t\t\t  <label>\n\t\t\t\t\tIs Done ?\n\t\t\t\t\t<input> {this.state.isDone}  </input>\n\t\t\t\t  </label>\n\t\t        </div>) \n\t}\n}","import React, { Component } from 'react'\nimport { Route, Redirect } from 'react-router-dom'\nimport AuthenticationService from '../../../service/authenticationService/AutenticationService.js'\n\nclass AuthenticatedRoute extends Component {\n    render() {\n        let aut = AuthenticationService\n        if (aut.isLogin()) {\n            return <Route {...this.props} />\n        } else {\n            return <Redirect to=\"/login\" />\n        }\n\n    }\n}\n\nexport default AuthenticatedRoute","import React from 'react'\nimport {Component} from 'react'\nimport Login from '../login/Login'\nimport Logout from  '../logout/Logout'\nimport {BrowserRouter as Router, Route, Switch, Link} from 'react-router-dom'\nimport Welcome from '../welcome/Welcome';\nimport TodoList from '../todolist/TodoList'\nimport Header from '../header/Header'\nimport Footer from '../footer/Footer'\nimport Blank from '../blank/Blank'\nimport TodoComponent from '../todocomponent/TodoComponent'\nimport AuthenticatedRoute from '../autenticatedroute/AuthenticateRoute'\nimport { ApmRoute } from '@elastic/apm-rum-react'\n\n\nexport default class TodoApp extends Component \n{          \n          \n    \n\n    render(){\n              \n        return(\n           <div className=\"TodoApp\">\n               <Router >\n                   <>\n                     <Header/>\n                     \n                     <Switch>\n                       <ApmRoute path=\"/\" exact                        component = {Blank}/>\n                       <ApmRoute path=\"/login\"                         component = {Login}/>\n                       <ApmRoute path=\"/logout\"                        component = {Logout}/>\n                       <AuthenticatedRoute  path=\"/welcome/:name\"   component = {Welcome}/>\n                       <AuthenticatedRoute path=\"/todos\"            component = {TodoList}/>\n                       <AuthenticatedRoute path=\"/todo\"             component = {TodoComponent}/>\n                       <ApmRoute                                       component = {ErrorMessage}/>\n                     </Switch>\n                     <Footer/>\n                   </>\n               </Router>\n\n            </div>\n           \n         )\n    }\n\n\n    }\n\n    function ErrorMessage(){\n        return <div > <h1 id=\"error\">Unknown Path</h1></div>\n     }\n","import React from 'react'\nimport {Component} from 'react'\nimport TodoApp from './components/todo/todoapp/TodoApp'\nimport { ApmRoute } from '@elastic/apm-rum-react'\n\nrequire('dotenv').config()\nexport default class App extends Component { \n    constructor (history) { \n        super()  \n        this.history = history\n    }\n\n\n    render()  { \n            return (<TodoApp />)\n        }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}